$.engineer={default_object:{defaults:{},structure:function(){},behavior:function(){}},_find:function(a){var b;b=typeof a=="object"?a:$.engineer[a];if(b==undefined)throw"The definition of "+a+" either failed to define or does not exist.";return b},build:function(a,b){a=$.engineer._find(a);b=$.extend(true,{},a.defaults,b);return a.structure(b)},make:function(a,b){a=$.engineer._find(a);var c=$.engineer.build(a,b);c.behaveLike(a,b);return c},define:function(a,b){this[a]=$.extend(true,{},this.default_object,
b)}};
(function(a){a.fn.makeInto=function(b){var c=a.engineer[b],d=this;this.each(function(f,e){e=a(e);var g={};for(var h in c.defaults)if(e.attr(h))g[h]=e.attr(h);new_obj=a.engineer.make(c,g);e.before(new_obj).remove();d[f]=new_obj[0]});return d};a.fn.behaveLike=function(b,c){var d=a.engineer._find(b),f=a.extend(true,{},d.defaults,c);return this.each(function(){var e=a(this),g=d.behavior.call(e,f);e.data("publicMethods",g)})};a.fn.send=function(b){for(var c=[],d=0;d<arguments.length;){j=d++;c[j]=arguments[d]}return this.each(function(){var f=
a(this).data("publicMethods");if(f)(method=f[b])&&method.apply(method,c)})}})(jQuery);
