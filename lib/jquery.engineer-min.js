$.engineer={default_object:{defaults:{},structure:function(){},behavior:function(){}},make:function(a,b){var c;c=typeof a=="object"?a:$.engineer[a];if(c==undefined)throw"The definition of "+a+" either failed to define or does not exist.";a=$.extend(true,{},c.defaults,b);b={};new_obj=c.structure.call(b,a);$.extend(new_obj,b);new_obj.behaveLike(c,a);return new_obj},define:function(a,b){this[a]=$.extend(true,{},this.default_object,b)}};
(function(a){a.fn.makeInto=function(b){var c=a.engineer[b];return this.each(function(){var d=a(this),e={};for(var f in c.defaults)if(d.attr(f))e[f]=d.attr(f);new_obj=a.engineer.make(c,e);d.before(new_obj).remove()})};a.fn.behaveLike=function(b,c){var d;d=typeof b=="object"?b:a.engineer[b];var e=a.extend(true,{},d.defaults,c);return this.each(function(){var f=a(this),g=d.behavior.call(f,e);f.data("publicMethods",g)})};a.fn.send=function(b){for(var c=[],d=0;d<arguments.length;){j=d++;c[j]=arguments[d]}return this.each(function(){var e=
a(this).data("publicMethods");if(e)(method=e[b])&&method.apply(method,c)})}})(jQuery);
