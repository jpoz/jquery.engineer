h1. JQuery Objects

Objective way to create and manage object's structure and behavior with JQuery.

h2. API

To define a new object with JQuery Objects use the define method. Each JQuery Object definition can have three parts:

# structure - Defines the html structure of the object.
# defaults - These are the default values of options passed to the structure.
# behavior - Defines how the object will behave.

All parts are optional.

h3. $.objects.define()

In the example defines a new objects named "photo_tile". Which displays a photo and when you click on the photo alerts you of it's title.

<pre>
  <code>
    $.objects.define('picture_tile', {
      structure: function(options) {
        this.image = $('<img/>', {src:options.photo_url, alt:photo_title})
        return $('<div/>', { html:this.image, class:photo_tile });
      },
      
      defaults: {'photo_tile':'Untitled',
                 'photo_url':'/images/missing.png'},

      behavior: function(options) {
        this.click(function() { 
          alert('This image is named '+$('img',self).attr('alt'); ) 
        });
      }
    });
  </code>
</pre>

h3. $.objects.make()

To create a "photo_tile" use the <code>make()</code> function. This will create a new instance of a photo tile with the options passed in that can then be appended to the page.

<pre>
  <code>
    var new_photo_tile = $.objects.make('picture_tile', { src:'/images/1.png', alt:'My trip to Vegas' });
    $('body').append(new_photo_tile);
  </code>
</pre>

h3. $('').behaveLike()

You can also use the "photo_tile" object to add functionality to already existing DOM elements:

You can just add a behavior to a DOM element by using the <code>behaveLike()</code> function.

<pre>
  <code>
    $('.photo').behaveLike('photo_tile');
  </code>
</pre>

h3. $('').makeInto()

You can also use xhtml attributes on existing DOM elements to define new instances of an Objects. Imagine you have the following HTML:

<pre>
 <code>
   <div class='placeholder' photo_url='/images/2.png' photo_title='My trip to New York'>Loading Image...</div>
 </code>
</pre>

You can make your placeholder element into a new instance of a JQuery object by using the <code>makeInto()</code> function. This will translate the xhtml attributes into the options passed into the creation of your object.

<pre>
 <code>
   $('.placeholder').makeInto('photo_tile');
   // this will have the photo_url of '/images/2.png'
   // and a photo_title of 'My trip to New York'
 </code>
</pre>

h3. $('').send()

JQuery Objects also allows you the ability to send messages to invoke functions between objects. Lets say I have a bunch of objects I'm going to want to collapse on my page. You can define a object with public methods by returning the definitions of those methods in your behavior function:

<pre>
  <code>
    $.objects.define('collapsable',{
      behavior: function(options) {
        var self = this;
        publicMethods = {};
        
        publicMethods.closeMe = function() {
          self.fadeOut(1000);
        }
        
        return publicMethods;
      }
    })
  </code>
</pre>

Then add the behavior to each object you want to have that public method:

<pre>
  <code>
    $('div.description').behaveLike('collapsable');
    $('div.controls').behaveLike('collapsable');
    $('div.footer').behaveLike('collapsable');
  </code>
</pre>

Then send the message "closeMe" to each element to invoke the functionality:

<pre>
  <code>
    $('div').send('closeMe');
  </code>
</pre>

This will cause all the div that have the function <code>closeMe()</code> to hide themselves.

h2. License

(The MIT License)

Copyright (c) 2010 James Pozdena

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script>
<script type="text/javascript">try {var pageTracker = _gat._getTracker("UA-3441225-8");pageTracker._trackPageview();} catch(err) {}</script>